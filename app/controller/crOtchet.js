/*
 * File: app/controller/crOtchet.js
 * Date: Tue Mar 14 2017 13:43:49 GMT+0200 (EET)
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Bank.controller.crOtchet', {
    extend: 'Ext.app.Controller',

    refs: {
        WinReport: {
            autoCreate: true,
            selector: '#winReport',
            xtype: 'winreport'
        },
        TabPnCenter: {
            selector: '#tabPnCenter',
            xtype: 'tabpncenter'
        }
    },

    control: {
        "#winReport": {
            show: 'onWinReportShow'
        },
        "#btAddAddress": {
            click: 'onBtAddAddressClick'
        },
        "#treeMenuSprav": {
            itemclick: 'onTreeMenuSpravItemClick'
        },
        "#btnWinReport": {
            click: 'onBtnWinReportClick'
        }
    },

    onWinReportShow: function(component, eOpts) {
        //M
        var stUser = Ext.data.StoreManager.get("StUser");

        var values =stUser.getAt(0);
        var login = values.get('login');
        var tbank = values.get('tbank');
        var namereport = values.get('namereport');
        var report = values.get('report');
        var user_id = values.get('user_id');
        var otdel_id = values.get('otdel_id');


        //V
        var me = this;
        var header = Ext.getCmp('headerReport');

        var fsGetPeriod = Ext.getCmp('fsGetPeriod');
        var btnWinReportOrg = Ext.getCmp('btnWinReportOrg');

        var winReport = me.getWinReport();

        var cbOtdelenie = Ext.getCmp('cbOtdelenie');
        var dateRepFrom = Ext.getCmp('dateRepFrom');
        var dateRepTo = Ext.getCmp('dateRepTo');
        var cbOperator = Ext.getCmp('cbOperator');
        var cbPr = Ext.getCmp('cbPr');
        var fsVibor = Ext.getCmp('fsVibor');




        header.setText(namereport).show();

        switch (report) {
            case 'KassirReestrDay':
            case 'KassaReestr':
            case 'KassaReestrOsmd':

                if (fsVibor.isHidden()){
                    fsVibor.show();
                }
                if (cbOtdelenie.isHidden()){
                    cbOtdelenie.show();
                    cbOtdelenie.setValue(otdel_id);
                }
                if (cbPr.isHidden()){
                    cbPr.show();
                }
                dateRepFrom.setValue(Ext.Date.format(new Date(), 'Y-m-d'));
                dateRepTo.setValue(Ext.Date.format(new Date(), 'Y-m-d'));
                break;
            case 'BankReestr':
            case 'BankReestrOsmd':
            case 'BankControl':


                dateRepFrom.setValue(Ext.Date.format(new Date(), 'Y-m-d'));
                dateRepTo.setValue(Ext.Date.format(new Date(), 'Y-m-d'));
                break;
            case 'OtdelReestr':
                  if (fsVibor.isHidden()){
                    fsVibor.show();
                }
                if (cbPr.isHidden()){
                    cbPr.show();
                }
                dateRepFrom.setValue(Ext.Date.format(new Date(), 'Y-m-d'));
                dateRepTo.setValue(Ext.Date.format(new Date(), 'Y-m-d'));
                break;
        }

    },

    onBtAddAddressClick: function(button, e, eOpts) {
        // in use
        var form = button.findParentByType('form');
        var value = form.getValues();

        var  cbAddress = form.getForm().findField('address');

        //console.log(value);
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StAddress = Ext.data.StoreManager.get("StAddressOrg");


        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            what:"newAddress"
        };


        //LOGIKA

        Ext.Object.merge(value, params);
        //LOGIKA

        QueryAddress.updateRecords(value,function(results){
            if(results.success==="1"){
                Ext.MessageBox.show({
                    title: 'Ввод нового адреса',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });
                StAddress.removeAll();
                cbAddress.clearValue();
                cbAddress.setDisabled(false);

                StAddress.load({
                    params: {
                        what:'AddressFromHouses',
                        what_id: value.house_id
                    },
                    scope: this
                });
            } else {
                Ext.MessageBox.show({
                    title: 'Ввод нового адреса',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }

        });
    },

    onTreeMenuSpravItemClick: function(dataview, record, item, index, e, eOpts) {
        //in use
        var me = this;

        // STORE

        var stUser = Ext.data.StoreManager.get("StUser");

        //Component

        var winReport = me.getWinReport();

        //LOGIN & PASSWORD

        var values =stUser.getAt(0);
        var login = values.get('login');
        var password = values.get('password');
        //values.set({'vibor':qtip});

        //LOGIKA
        var parentId = record.data.parentId;
        var id = record.data.id;
        var text = record.data.text;
        var qtip = record.data.text;
        //console.log(id);
        switch (id) {

            case 'KassirReestrDay':
            case 'KassaReestr':
            case 'BankReestr':
            case 'OtdelReestr':
            case 'BankReestrOsmd':
            case 'KassaReestrOsmd':
            case 'BankControl':

                values.set({
                    'report':id,
                    'namereport':text,
                    'reportheader':text
                });
                winReport.show();
                break;
        }

    },

    onBtnWinReportClick: function(button, e, eOpts) {
        var me = this;
        me.tabOtSvNach();

    },

    tabOtSvNach: function() {

        //in use
        var me = this;
        // STORE
        var StUser = Ext.data.StoreManager.get("StUser");
        var StReport = Ext.data.StoreManager.get("StReport");
        //TAB
        var winReport = me.getWinReport();
        var tabPnCenter = me.getTabPnCenter();
        // FORM
        var fmWinReport = Ext.getCmp("fmWinReport");  //Форма
        var value = fmWinReport.getValues();

        //LOGIN & PASSWORD & ID
        var values =StUser.getAt(0);
        var params = {
            login:values.get('login'),
            user_id:values.get('user_id'),

            password:values.get('password'),
            report:values.get('report'),
            what:values.get('report')
        };

        var report = values.get('report');
        var namereport = values.get('reportheader');

        //console.log(namereport);


        //LOGIKA

        Ext.Object.merge(value, params);


        var tab = tabPnCenter.child('#'+report);

        if (!tab) {
            tab  = tabPnCenter.add({
                xtype:'tabreportorg',
                title:namereport,
                id:''+report+''
            });

            tabPnCenter.setActiveTab(tab);

        }else{

            tabPnCenter.setActiveTab(tab);
        }

        var reppan = tab.getComponent(0);



        // Basic mask:
          var myMask =new Ext.LoadMask({
                 target: reppan ,
                 msg:"Загрузка..."
             });
        QueryReport.getResults(value,function(results){
            if (results.success==="1"){
                reppan.update(results.content);
                Ext.REPORTCONTENT =results.content;
                Ext.REPORTSQL =results.sql;
                Ext.REPORTTITLE =report;
                winReport.close();
                        myMask.hide();


            }else{
                winReport.close();
                myMask.hide();
                Ext.MessageBox.show({title: namereport,
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });


            }
        });



    },

    openSprav: function(tid, tname) {
        //in use

        var me = this;
        var tabPnCenter = me.getTabPnCenter();
        var tab = tabPnCenter.child('#'+tid);
        if (!tab) {
            tab  = tabPnCenter.add({
                xtype:tid,
                id:tid
            });

            tabPnCenter.setActiveTab(tab);
        }else{
            tabPnCenter.setActiveTab(tab);
        }
    }

});
