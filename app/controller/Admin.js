/*
 * File: app/controller/Admin.js
 * Date: Fri May 29 2015 00:08:00 GMT+0300 (EEST)
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Bank.controller.Admin', {
    extend: 'Ext.app.Controller',

    control: {
        "#tabOperator": {
            activate: 'onTabOperatorActivate'
        },
        "#tabOtdelenie": {
            activate: 'onTabOtdelenieActivate'
        },
        "#tabClientBanka": {
            activate: 'onTabClientBankaActivate'
        },
        "#tabReestr": {
            activate: 'onTabReestrActivate'
        },
        "#tabSvod": {
            activate: 'onTabSvodActivate'
        },
        "#btAddOperator": {
            click: 'onBtAddOperatorClick'
        },
        "#btAddOtdelenie": {
            click: 'onBtAddOtdelenieClick'
        },
        "#btAddClientBanka": {
            click: 'onBtAddClientBankaClick'
        },
        "#printSvod": {
            click: 'onPrintSvodClick'
        },
        "#exportSvod": {
            click: 'onExportSvodClick'
        }
    },

    onTabOperatorActivate: function(component, eOpts) {
        //in use
        var me = this;

        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StOperatorBank = Ext.data.StoreManager.get("StOperatorBank");

        //LOGIN & PASSWORD

        var values =stUser.getAt(0);
        var tbank = values.get('tbank');

        StOperatorBank.load({
            params: {
                what:'getOperator',
                tbank: tbank


            },
            scope:this
        });

    },

    onTabOtdelenieActivate: function(component, eOpts) {
        //in use
        var me = this;

        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StOtdelenieBank = Ext.data.StoreManager.get("StOtdelenieBank");

        //LOGIN & PASSWORD

        var values =stUser.getAt(0);
        var tbank = values.get('tbank');

        StOtdelenieBank.load({
            params: {
                what:'getOtdelenie',
                tbank: tbank


            },
            scope:this
        });

    },

    onTabClientBankaActivate: function(component, eOpts) {
        //in use
        var me = this;

        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StClientBanka = Ext.data.StoreManager.get("StClientBanka");

        //LOGIN & PASSWORD

        var values =stUser.getAt(0);
        var tbank = values.get('tbank');

        StClientBanka.load({
            params: {
                what:'getClientBanka',
                tbank: tbank


            },
            scope:this
        });

    },

    onTabReestrActivate: function(component, eOpts) {
        //in use
        var me = this;

        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StReestr = Ext.data.StoreManager.get("StReestr");

        //LOGIN & PASSWORD

        var values =stUser.getAt(0);
        var tbank = values.get('tbank');
        var address_id = values.get('address_id');
        var address = values.get('address');

        //console.log(values);

        StReestr.load({
            params: {
                what:'getReestr',
                address_id: address_id ,
                tbank: tbank
            },
            scope:this
        });
        component.down('#grReestr').setTitle(address_id+'  Редактирование реестра по адресу ' +address );

    },

    onTabSvodActivate: function(component, eOpts) {
        var dateSvod = Ext.getCmp('dateSvod');
        var pr = Ext.getCmp('cbKassaSvod');
        var dt = new Date() ;
        dt.getDate();
        dateSvod.setValue(Ext.Date.format(dt, 'Y-m-d'));
        pr.setValue("D");
    },

    onBtAddOperatorClick: function(button, e, eOpts) {
        // in use
        var me = this;
        //CONTROLLER

        var value = button.findParentByType('form').getValues();
        //STORE

        var stUser = Ext.data.StoreManager.get("StUser");
        var values =stUser.getAt(0);
        var vibor = values.get('vibor');
        button.up('#winOperator').close();
        switch (vibor){
            case 'addOperator':  // ВЫБРАНА КВАРТИРА
            me.fnAddOperator(value);
            break;
            case 'editOperator':  // ВЫБРАНА КВАРТИРА
            me.fnEditOperator(value);
            break;
        }
    },

    onBtAddOtdelenieClick: function(button, e, eOpts) {
        // in use
        var me = this;
        //CONTROLLER

        var value = button.findParentByType('form').getValues();
        //STORE

        var stUser = Ext.data.StoreManager.get("StUser");
        var values =stUser.getAt(0);
        var vibor = values.get('vibor');
        button.up('#winOtdelenie').close();
        switch (vibor){
            case 'addOtdelenie':
            me.fnAddOtdelenie(value);
            break;
            case 'editOtdelenie':
            me.fnEditOtdelenie(value);
            break;
        }
    },

    onBtAddClientBankaClick: function(button, e, eOpts) {
        // in use
        var me = this;
        //CONTROLLER

        var value = button.findParentByType('form').getValues();
        //STORE

        var stUser = Ext.data.StoreManager.get("StUser");
        var values =stUser.getAt(0);
        var vibor = values.get('vibor');
        button.up('#winClientBanka').close();
        switch (vibor){
            case 'addClientBanka':
            me.fnAddClientBanka(value);
            break;
            case 'editClientBanka':
            me.fnEditClientBanka(value);
            break;
        }
    },

    onPrintSvodClick: function(button, e, eOpts) {
        //in use
        var me = this;
        var StUser = Ext.data.StoreManager.get("StUser");
        var StReport = Ext.data.StoreManager.get("StReport");
        var data = Ext.getCmp('dateSvod').getValue();
        var pr = Ext.getCmp('cbKassaSvod').getValue();
        var otdel_id = Ext.getCmp('cbOtdelenieSvod').getValue();


        var values =StUser.getAt(0);
        var tbank = values.data.tbank;
        var user_id = values.data.user_id;
        //console.log(values);
        var usertype = 1;

        var tabPnCenter =  Ext.getCmp('tabPnCenter');//me.getTabPnCenter();
        if (otdel_id) {
            var report = 'PrintSvod';
            var namereport = 'Печать свода';
            var value = {
                login:values.get('login'),
                tbank:tbank,
                pr:pr,
                report:report,
                data:data,
                what:report,
                otdel_id: otdel_id,
                user_id:user_id
            };
            var tab = tabPnCenter.child('#'+report);
            if (!tab) {
                tab  = tabPnCenter.add({
                    xtype:'tabreportorg',
                    title:namereport,
                    id:''+report+''
                });

            }
            tabPnCenter.setActiveTab(tab);
            var reppan = tab.getComponent(0);
            // Basic mask:
             var myMask =new Ext.LoadMask({
                 target: reppan ,
                 msg:"Загрузка..."
             });
            myMask.show();
            QueryReport.printSvod(value,function(data){
                if (data){
                    reppan.update(data.content);
                    Ext.REPORTCONTENT =data.content;
                    Ext.REPORTSQL =data.sql;
                    Ext.REPORTTITLE =report;
                    myMask.hide();

                } else {
                    myMask.hide();
                    Ext.MessageBox.show({
                        title: 'Ошибка ',
                        msg: 'Документ не создан',
                        buttons: Ext.MessageBox.OK,
                        icon: Ext.MessageBox.ERROR
                    });
                }
            });

        }
    },

    onExportSvodClick: function(button, e, eOpts) {
        //STORE

        var stUser = Ext.data.StoreManager.get("StUser");

        //LOGIN & PASSWORD & SQL

        var values =stUser.getAt(0);
        var tbank = values.data.tbank;
        var user_id = values.data.user_id;
        var role = values.data.role;
        //console.log(values);

        var data = Ext.getCmp('dateSvod').getValue();
        var pr = Ext.getCmp('cbKassaSvod').getValue();
        var otdel_id = Ext.getCmp('cbOtdelenieSvod').getValue();

        if (role==='Админ') {
        //console.log(values);

            button.setParams({tbank:tbank,otdel_id:otdel_id,pr:pr,data:data});
        }else {
            Ext.MessageBox.show({
                title: 'Ошибка ',
                msg: 'Экспортировать свод может только администратор',
                buttons: Ext.MessageBox.OK,
                icon: Ext.MessageBox.ERROR
            });  }


    },

    fnAddOperator: function(value) {
        // in use
        var me = this;
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StOperatorBank = Ext.data.StoreManager.get("StOperatorBank");
        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var tbank = values.get('tbank');

        //LOGIKA

        var params = {
            tbank:values.get('tbank'),
            what:"insertOperator"
        };

        //LOGIKA

        Ext.Object.merge(value, params);

        QuerySprav.createRecord(value,function(results){
            if (results.success){
                StOperatorBank.load({
                    params:{
                        what:'getOperator',
                        tbank: tbank

                    },
                    scope:this
                });
            }
        });
    },

    fnEditOperator: function(value) {
        // in use
        var me = this;
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StOperatorBank = Ext.data.StoreManager.get("StOperatorBank");
        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var tbank = values.get('tbank');

        //LOGIKA

        var params = {
            tbank:values.get('tbank'),
            what:"updateOperator"
        };

        //GRID
        //LOGIKA

        Ext.Object.merge(value, params);

        QuerySprav.updateRecords(value,function(results){
            if (results.success){
                StOperatorBank.load({
                    params:{
                        what:'getOperator',
                        tbank: tbank

                    },
                    scope:this
                });
            }
        });

    },

    fnAddOtdelenie: function(value) {
        // in use
        var me = this;
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StOtdelenieBank = Ext.data.StoreManager.get("StOtdelenieBank");
        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var tbank = values.get('tbank');

        //LOGIKA

        var params = {
            tbank:values.get('tbank'),
            what:"insertOtdelenie"
        };

        //LOGIKA

        Ext.Object.merge(value, params);

        QuerySprav.createRecord(value,function(results){
            if (results.success){
                StOtdelenieBank.load({
                    params:{
                        what:'getOtdelenie',
                        tbank: tbank

                    },
                    scope:this
                });
            }
        });
    },

    fnEditOtdelenie: function(value) {
        // in use
        var me = this;
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StOtdelenieBank = Ext.data.StoreManager.get("StOtdelenieBank");
        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var tbank = values.get('tbank');

        //LOGIKA

        var params = {
            tbank:values.get('tbank'),
            what:"updateOtdelenie"
        };

        //GRID
        //LOGIKA

        Ext.Object.merge(value, params);

        QuerySprav.updateRecords(value,function(results){
            if (results.success){
                StOtdelenieBank.load({
                    params:{
                        what:'getOtdelenie',
                        tbank: tbank

                    },
                    scope:this
                });
            }
        });

    },

    fnAddClientBanka: function(value) {
        // in use
        var me = this;
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StClientBanka = Ext.data.StoreManager.get("StClientBanka");
        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var tbank = values.get('tbank');

        //LOGIKA

        var params = {
            tbank:values.get('tbank'),
            what:"insertClientBanka"
        };

        //LOGIKA

        Ext.Object.merge(value, params);

        QuerySprav.createRecord(value,function(results){
            if (results.success){
                StClientBanka.load({
                    params:{
                        what:'getClientBanka',
                        tbank: tbank

                    },
                    scope:this
                });
            }
        });
    },

    fnEditClientBanka: function(value) {
        // in use
        var me = this;
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StClientBanka = Ext.data.StoreManager.get("StClientBanka");
        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var tbank = values.get('tbank');

        //LOGIKA

        var params = {
            tbank:values.get('tbank'),
            what:"updateClientBanka"
        };

        //GRID
        //LOGIKA

        Ext.Object.merge(value, params);

        QuerySprav.updateRecords(value,function(results){
            if (results.success){
                StClientBanka.load({
                    params:{
                        what:'getClientBanka',
                        tbank: tbank

                    },
                    scope:this
                });
            }
        });

    }

});
