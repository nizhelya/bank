{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "crOtchet"
    },
    "designerId": "f276923e-f8d3-423d-9a15-08cce51f3e4c",
    "cn": [
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "autoCreate": true,
                "ref": "WinReport",
                "selector": "#winReport",
                "xtype": "winreport"
            },
            "name": "WinReport",
            "designerId": "31b9e466-7b04-477b-b220-a1e238c29461"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "tabOtSvNach",
                "implHandler": [
                    "",
                    "//in use",
                    "var me = this;",
                    "// STORE",
                    "var StUser = Ext.data.StoreManager.get(\"StUser\");",
                    "var StReport = Ext.data.StoreManager.get(\"StReport\");",
                    "//TAB",
                    "var winReport = me.getWinReport();",
                    "var tabPnCenter = me.getTabPnCenter();",
                    "// FORM",
                    "var fmWinReport = Ext.getCmp(\"fmWinReport\");  //Форма",
                    "var value = fmWinReport.getValues();",
                    "",
                    "//LOGIN & PASSWORD & ID",
                    "var values =StUser.getAt(0);",
                    "var params = {",
                    "    login:values.get('login'),",
                    "    user_id:values.get('user_id'),",
                    "",
                    "    password:values.get('password'),",
                    "    report:values.get('report'),",
                    "    what:values.get('report')",
                    "};",
                    "",
                    "var report = values.get('report');",
                    "var namereport = values.get('reportheader');",
                    "",
                    "//console.log(namereport);",
                    "",
                    "",
                    "//LOGIKA",
                    "",
                    "Ext.Object.merge(value, params);",
                    "",
                    "",
                    "var tab = tabPnCenter.child('#'+report);",
                    "",
                    "if (!tab) {",
                    "    tab  = tabPnCenter.add({",
                    "        xtype:'tabreportorg',",
                    "        title:namereport,",
                    "        id:''+report+''",
                    "    });",
                    "",
                    "    tabPnCenter.setActiveTab(tab);",
                    "",
                    "}else{",
                    "",
                    "    tabPnCenter.setActiveTab(tab);",
                    "}",
                    "",
                    "var reppan = tab.getComponent(0);",
                    "",
                    "",
                    "",
                    "// Basic mask:",
                    "  var myMask =new Ext.LoadMask({",
                    "         target: reppan ,",
                    "         msg:\"Загрузка...\"",
                    "     });",
                    "QueryReport.getResults(value,function(results){",
                    "    if (results.success===\"1\"){",
                    "        reppan.update(results.content);",
                    "        Ext.REPORTCONTENT =results.content;",
                    "        Ext.REPORTSQL =results.sql;",
                    "        Ext.REPORTTITLE =report;",
                    "        winReport.close();",
                    "                myMask.hide();",
                    "",
                    "",
                    "    }else{",
                    "        winReport.close();",
                    "        myMask.hide();",
                    "        Ext.MessageBox.show({title: namereport,",
                    "            msg: results.msg,",
                    "            buttons: Ext.MessageBox.OK,",
                    "            icon: Ext.MessageBox.ERROR",
                    "        });",
                    "",
                    "",
                    "    }",
                    "});",
                    "",
                    "",
                    ""
                ]
            },
            "name": "tabOtSvNach",
            "designerId": "39608f8d-f2d7-4d35-acc7-d8c7b26e58af"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "tid",
                    "tname"
                ],
                "fn": "openSprav",
                "implHandler": [
                    "//in use",
                    "",
                    "var me = this;",
                    "var tabPnCenter = me.getTabPnCenter();",
                    "var tab = tabPnCenter.child('#'+tid);",
                    "if (!tab) {",
                    "    tab  = tabPnCenter.add({",
                    "        xtype:tid,",
                    "        id:tid",
                    "    });",
                    "",
                    "    tabPnCenter.setActiveTab(tab);  ",
                    "}else{",
                    "    tabPnCenter.setActiveTab(tab);",
                    "}  "
                ]
            },
            "name": "openSprav",
            "designerId": "5dc804aa-380a-4fd6-a49a-fb1260bdf21c"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#winReport",
                "designer|targetType": "Ext.window.Window",
                "fn": "onWinReportShow",
                "implHandler": [
                    "//M",
                    "var stUser = Ext.data.StoreManager.get(\"StUser\");",
                    "",
                    "var values =stUser.getAt(0);",
                    "var login = values.get('login');",
                    "var tbank = values.get('tbank');",
                    "var namereport = values.get('namereport');",
                    "var report = values.get('report');",
                    "var user_id = values.get('user_id');",
                    "var otdel_id = values.get('otdel_id');",
                    "",
                    "",
                    "//V",
                    "var me = this;",
                    "var header = Ext.getCmp('headerReport');",
                    "",
                    "var fsGetPeriod = Ext.getCmp('fsGetPeriod');",
                    "var btnWinReportOrg = Ext.getCmp('btnWinReportOrg');",
                    "",
                    "var winReport = me.getWinReport();",
                    "",
                    "var cbOtdelenie = Ext.getCmp('cbOtdelenie');",
                    "var dateRepFrom = Ext.getCmp('dateRepFrom');",
                    "var dateRepTo = Ext.getCmp('dateRepTo');",
                    "var cbOperator = Ext.getCmp('cbOperator');",
                    "var cbPr = Ext.getCmp('cbPr');",
                    "var fsVibor = Ext.getCmp('fsVibor');",
                    "",
                    "",
                    "",
                    "",
                    "header.setText(namereport).show();",
                    "",
                    "switch (report) {",
                    "    case 'KassirReestrDay':",
                    "    case 'KassaReestr':",
                    "    case 'KassaReestrOsmd':",
                    "",
                    "        if (fsVibor.isHidden()){",
                    "            fsVibor.show();",
                    "        }",
                    "        if (cbOtdelenie.isHidden()){",
                    "            cbOtdelenie.show();",
                    "            cbOtdelenie.setValue(otdel_id);",
                    "        }",
                    "        if (cbPr.isHidden()){",
                    "            cbPr.show();",
                    "        }",
                    "        dateRepFrom.setValue(Ext.Date.format(new Date(), 'Y-m-d'));",
                    "        dateRepTo.setValue(Ext.Date.format(new Date(), 'Y-m-d'));",
                    "        break;",
                    "    case 'BankReestr':",
                    "    case 'BankReestrOsmd':",
                    "    case 'BankControl':",
                    "",
                    "",
                    "        dateRepFrom.setValue(Ext.Date.format(new Date(), 'Y-m-d'));",
                    "        dateRepTo.setValue(Ext.Date.format(new Date(), 'Y-m-d'));",
                    "        break;",
                    "    case 'OtdelReestr':",
                    "          if (fsVibor.isHidden()){",
                    "            fsVibor.show();",
                    "        }",
                    "        if (cbPr.isHidden()){",
                    "            cbPr.show();",
                    "        }",
                    "        dateRepFrom.setValue(Ext.Date.format(new Date(), 'Y-m-d'));",
                    "        dateRepTo.setValue(Ext.Date.format(new Date(), 'Y-m-d'));",
                    "        break;",
                    "}",
                    ""
                ],
                "name": "show",
                "scope": "me"
            },
            "name": "onWinReportShow",
            "designerId": "d3445874-62fd-4153-a1e6-7eff6fa35f99"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#btAddAddress",
                "designer|targetType": "Ext.button.Button",
                "fn": "onBtAddAddressClick",
                "implHandler": [
                    "// in use",
                    "var form = button.findParentByType('form');",
                    "var value = form.getValues();",
                    "",
                    "var  cbAddress = form.getForm().findField('address');   ",
                    "",
                    "//console.log(value);",
                    "//STORE",
                    "var stUser = Ext.data.StoreManager.get(\"StUser\");",
                    "var StAddress = Ext.data.StoreManager.get(\"StAddressOrg\");",
                    "",
                    "",
                    "//LOGIN & PASSWORD",
                    "var values =stUser.getAt(0);",
                    "var params = {",
                    "    login:values.get('login'),",
                    "    password:values.get('password'),",
                    "    what:\"newAddress\"",
                    "};",
                    "",
                    "",
                    "//LOGIKA",
                    "",
                    "Ext.Object.merge(value, params);",
                    "//LOGIKA",
                    "",
                    "QueryAddress.updateRecords(value,function(results){",
                    "    if(results.success===\"1\"){ ",
                    "        Ext.MessageBox.show({",
                    "            title: 'Ввод нового адреса',",
                    "            msg: results.msg,",
                    "            buttons: Ext.MessageBox.OK,",
                    "            icon: Ext.MessageBox.INFO",
                    "        });",
                    "        StAddress.removeAll();",
                    "        cbAddress.clearValue();",
                    "        cbAddress.setDisabled(false); ",
                    "",
                    "        StAddress.load({",
                    "            params: {",
                    "                what:'AddressFromHouses',",
                    "                what_id: value.house_id       ",
                    "            },",
                    "            scope: this",
                    "        });",
                    "    } else {",
                    "        Ext.MessageBox.show({",
                    "            title: 'Ввод нового адреса',",
                    "            msg: results.msg,",
                    "            buttons: Ext.MessageBox.OK,",
                    "            icon: Ext.MessageBox.ERROR",
                    "        });",
                    "    }",
                    "",
                    "});"
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onBtAddAddressClick",
            "designerId": "e520ffdf-3f27-4cf5-9854-07f746ba1b42"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "TabPnCenter",
                "selector": "#tabPnCenter",
                "xtype": "tabpncenter"
            },
            "name": "TabPnCenter",
            "designerId": "a733d93d-8111-4d30-9a6a-b45eb45a986a"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#treeMenuSprav",
                "designer|targetType": "Ext.tree.Panel",
                "fn": "onTreeMenuSpravItemClick",
                "implHandler": [
                    "//in use",
                    "var me = this;",
                    "",
                    "// STORE",
                    "",
                    "var stUser = Ext.data.StoreManager.get(\"StUser\");",
                    "",
                    "//Component",
                    "",
                    "var winReport = me.getWinReport();",
                    "",
                    "//LOGIN & PASSWORD",
                    "",
                    "var values =stUser.getAt(0);",
                    "var login = values.get('login');",
                    "var password = values.get('password');",
                    "//values.set({'vibor':qtip});",
                    "",
                    "//LOGIKA",
                    "var parentId = record.data.parentId;",
                    "var id = record.data.id;",
                    "var text = record.data.text;",
                    "var qtip = record.data.text;",
                    "//console.log(id);",
                    "switch (id) {",
                    "",
                    "    case 'KassirReestrDay':",
                    "    case 'KassaReestr':",
                    "    case 'BankReestr':",
                    "    case 'OtdelReestr':",
                    "    case 'BankReestrOsmd':",
                    "    case 'KassaReestrOsmd':",
                    "    case 'BankControl':",
                    "",
                    "        values.set({",
                    "            'report':id,",
                    "            'namereport':text,",
                    "            'reportheader':text",
                    "        });",
                    "        winReport.show();",
                    "        break;",
                    "}",
                    ""
                ],
                "name": "itemclick",
                "scope": "me"
            },
            "name": "onTreeMenuSpravItemClick",
            "designerId": "99a7f79e-82da-46ae-a136-665baee36659"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#btnWinReport",
                "designer|targetType": "Ext.button.Button",
                "fn": "onBtnWinReportClick",
                "implHandler": [
                    "var me = this;",
                    "me.tabOtSvNach();   ",
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "onBtnWinReportClick",
            "designerId": "0790679f-e43e-44b8-91f2-1486b3fe8e67"
        }
    ]
}